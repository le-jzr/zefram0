
type IDENTIFIER
type STRING
type DECIMAL
type CHAR
type HEXADECIMAL
type OCTAL
type FLOAT


type Type = NamedType | ArrayType | PointerType | ModifiedType

// $name
// $pkg :: $name
type NamedType = struct {
	pkg: ?IDENTIFIER
	name: IDENTIFIER
}

// $inner [ ]
// $inner [ $length ]
type ArrayType = struct {
	inner: Type
	length: ?ConstantExpr
}

// $inner *
type PointerType = struct {
	inner: Type
}

// $modifier ( $inner )
type ModifiedType = struct {
	modifier: TypeModifier
	inner: Type
}

type TypeModifier = enum {
	CONST    const
	VOLATILE volatile
	NONULL   nonull
}










type File = TranslationUnit

// $units
type TranslationUnit = struct {
	units: []CodeUnit
}

// $pkgdecl $imports $defs
type CodeUnit = struct {
	pkgdecl: PackageDeclaration
	imports: []Import
	defs: []Definition
}

// package $name ;
type PackageDeclaration = struct {
	name: STRING
}

// import $name from $pkg ;
// import $name ( $syms ) from $pkg ;
type Import = struct {
	pkg: STRING
	name: IDENTIFIER
	// separator ,
	syms: []IDENTIFIER
}

type Definition = FuncDef | ConstDef | VarDef | TypeDef

// $rettype $name ( $params ) $mods $body
// $rettype $name ( $params ) $mods ;
type FuncDef = struct {
	rettype: Type
	name: IDENTIFIER
	// separator ,
	params: []ParamDecl
	mods: []FunctionModifier
	body: ?CompoundStatement
}

type FunctionModifier = NoReturnModifier | ExternModifier | InlineModifier

// noreturn
type NoReturnModifier = struct {
}

// extern
type ExternModifier = struct {
}

// inline
type InlineModifier = struct {
}

// const $name = $value ;
// const $type $name = $value ;
type ConstDef = struct {
	type: ?Type
	name: IDENTIFIER
	value: ConstantExpr
}

// $type $name ;
// $type $name = $value ;
type VarDef = struct {
	type: Type
	name: IDENTIFIER
	value: ?ConstantExpr
}

type TypeDef = StructDef | DelegateDef | AliasDef

// struct $name { $members } ;
// struct $name { $members }
type StructDef = struct {
	name: IDENTIFIER
	// min_length 1
	members: []StructMember
}

// $type $name ;
type StructMember = struct {
	type: Type
	name: IDENTIFIER
}

// type $name = $type ;
type AliasDef = struct {
	name: IDENTIFIER
	type: Type
}

// delegate $rettype $name ( $params ) ;
type DelegateDef = struct {
	rettype: Type
	name: IDENTIFIER
	// separator ,
	params: []ParamDecl
}

// $type $name
type ParamDecl = struct {
	type: Type
	name: IDENTIFIER
}

type Declaration = VarDef
